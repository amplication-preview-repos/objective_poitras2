/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VoiceCommand as PrismaVoiceCommand,
  Response as PrismaResponse,
  User as PrismaUser,
  Device as PrismaDevice,
} from "@prisma/client";

export class VoiceCommandServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VoiceCommandCountArgs, "select">
  ): Promise<number> {
    return this.prisma.voiceCommand.count(args);
  }

  async voiceCommands(
    args: Prisma.VoiceCommandFindManyArgs
  ): Promise<PrismaVoiceCommand[]> {
    return this.prisma.voiceCommand.findMany(args);
  }
  async voiceCommand(
    args: Prisma.VoiceCommandFindUniqueArgs
  ): Promise<PrismaVoiceCommand | null> {
    return this.prisma.voiceCommand.findUnique(args);
  }
  async createVoiceCommand(
    args: Prisma.VoiceCommandCreateArgs
  ): Promise<PrismaVoiceCommand> {
    return this.prisma.voiceCommand.create(args);
  }
  async updateVoiceCommand(
    args: Prisma.VoiceCommandUpdateArgs
  ): Promise<PrismaVoiceCommand> {
    return this.prisma.voiceCommand.update(args);
  }
  async deleteVoiceCommand(
    args: Prisma.VoiceCommandDeleteArgs
  ): Promise<PrismaVoiceCommand> {
    return this.prisma.voiceCommand.delete(args);
  }

  async findResponses(
    parentId: string,
    args: Prisma.ResponseFindManyArgs
  ): Promise<PrismaResponse[]> {
    return this.prisma.voiceCommand
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .responses(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.voiceCommand
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getDevice(parentId: string): Promise<PrismaDevice | null> {
    return this.prisma.voiceCommand
      .findUnique({
        where: { id: parentId },
      })
      .device();
  }
}
